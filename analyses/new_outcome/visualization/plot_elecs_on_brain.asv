function plot_elecs_on_brain

%% Get file locs
locations = fc_toolbox_locs;
results_folder = [locations.main_folder,'results/'];
data_folder = '/DATA/Human_Data/CNT_iEEG_BIDS/';
inter_folder = [results_folder,'analysis/new_outcome/data/'];
freesurfer_path = '/Applications/freesurfer/7.3.2/matlab/';

% add script folder to path
scripts_folder = locations.script_folder;
addpath(genpath(scripts_folder));

addpath(genpath(freesurfer_path))

%% Load data file
mt_data = load([inter_folder,'mt_out.mat']);
mt_data = mt_data.out;
all_missing = cellfun(@isempty,mt_data.all_spikes(:,1,1));
names = mt_data.all_names;

%% Load Manual validation file
T = readtable('Manual validation.xlsx','Sheet','RIDs');

non_missing = find(~all_missing);
npts = length(non_missing);
for i = 1:npts
    name = names(non_missing(i));

    % find matching row
    r = strcmp(T.name,name);
    assert(sum(r)==1)

    % get rid
    rid = T.RIDs(r);

    % make rid text
    if rid <100
        folder_text = sprintf('sub-RID00%d/',rid);
    else
        folder_text = sprintf('sub-RID0%d/',rid);
    end

    % Load T1 file and get transformation matrix
    t1_file = [data_folder,folder_text,'derivatives/freesurfer/mri/T1.mgz'];
    mri = MRIread([pial_folder,'T1.mgz']);
    vox_2_ras = mri.vox2ras;
    tkras = mri.tkrvox2ras;
    transform = @(x) ((vox_2_ras * inv(tkras) * ([x repmat(ones,size(x,1),1)])')');
    first_three_columns = @(x) x(:,1:3);
    all_trans = @(x) first_three_columns(transform(x));

    % load pial files and get vertices and faces and apply transformation
    pial_folder = [data_folder,folder_text,'derivatives/fresurfer/surf/'];
    lobj = SurfStatReadSurf([pial_folder,'lh.pial']);
    lvertices = lobj.coord';
    lfaces = (lobj.tri);

    robj = SurfStatReadSurf([pial_folder,'rh.pial']);
    rvertices = robj.coord';
    rfaces = robj.tri;

    % Get electrode localizations
    module2 = [data_folder,folder_text,'derivatives/ieeg_recon/module2/']; % module2 folder
    listing = dir([module2,'*.txt']);
    nlist = length(listing);
    found_it = 0;
    for l = 1:nlist
        if contains(listing(l).name,'mm')
            found_it = 1;
            fname = listing(l).name;
            break
        end

    end
    assert(found_it==1)
    T = readtable([module2,fname]);
    locs = [T.Var1 T.Var2 T.Var3];
    allowable_labels = get_allowable_elecs('HUP100');
    mt_symm = find_mt_symmetric_coverage(names,allowable_labels);
    mt = ismember(names,mt_symm);

    % get electrode names
    listing = dir([module2,'*.electrode_names.txt']);
    assert(length(listing)==1)
    Tnames = readtable([module2,listing.name]);
    names = Tnames.Var1;

    

end

end